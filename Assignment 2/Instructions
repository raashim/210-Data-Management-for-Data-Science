Problem 1: reverse_sorted_words (20 Points)
Write a called function reverse_sorted_words that reads words from a filename, which is given as a string argument. It should return the words from the file in a list, sorted in reverse alphabetical order (case insensitive). Note that the words in the same line are separated by commas.

For instance, if the file has
bell,tea,Zebra
apple
yellow
Then the output should be

['Zebra', 'yellow', 'tea', 'bell', 'apple']

Example output for

reverse_sorted_words("example_words.txt")

['whispering', 'visitor', 'utopian', 'Thrill', 'tangible', 'ray', 'point', 'pan', 'launch', 'hurry', 'houses', 'frog', 'five', 'fang', 'continue', 'buzz', 'Ask', 'airport', 'advise', 'activity']

Problem 2: reformat_student_info (20 Points)
Your professor asked your TA to collect student information and store it in a file called studentInfo.txt, but this TA spilled Pepsi on the keyboard while entering the data. As a result, there are extra or missing spaces and missing commas throughout the file. For example, the file has

wd50,WillDavidson, 090,3
hpj4332, Helen              Jordan1983.88
xd222XavierDavies1983.65
ad12  AdDavies1983.65
Suppose the file contains netID, name, major, and GPA in that order. Can you help this TA make the file more readable?

To accomplish this task, you may assume the following about each field: netID: begins with 2-3 lowercase letters followed by 1-4 digits (e.g., wd1, wxo001, tsy1234) name: contains both first name and last name with their first letter capitalized (e.g., "John Doe", "MarySmith"). There may be zero or more spaces between the first name and last name. major: 3-digit code (e.g., 198) GPA: floating point number between 0.0 and 4.0 (inclusive). There may or may not be a decimal point (e.g., 3.0 or 3).

Write a function called reformat_student_info to convert a file into a standard format, which has exactly one comma followed by one space to separate each field. The function should accept a filename string parameter. Write the cleaned data to a new file called studentInfoReformatted.txt and format the file as follows:

netID, name, major, GPA

There should be exactly one comma followed by one space to separate each field. The name field should include exactly one space between first name and last name, and the GPA should have a decimal even if the GPA from the input file does not (e.g., 3.0 instead of 3).

The reformatted file for the sample above should look like this:

wd50, Will Davidson, 090, 3.0
hpj4332, Helen Jordan, 198, 3.88
xd222, Xavier Davies, 198, 3.65
ad12, Ad Davies, 198, 3.65


Problem 3: count_word_lengths (20 Points)
Write a function called count_word_lengths that reads words from a file (the filename is provided as a string parameter) and counts the occurrence of each word's length. The function should return a list of tuples of (word_length, count), where count is the number of words of length word_length. The returned list should be in reverse order, from the longest word length to the shortest.

For example, if the file contains text

Python beats Java
Linux trumps Windows
the occurrence of each word length is as follows:

Length 7: 1 words ("Windows")
Length 6: 1 words ("Python","trumps")
Length 5: 2 words ("beats", "Linux")
Length 4: 2 words ("Java")
then the function should return

[(7,1), (6,2), (5,2), (4,1)]

Problem 4: count_last_letter (20 Points)
Write a function called count_last_letter that reads words passing from a string parameter and create a dictionary mapping last letters to the number of words ending with that letter. You may assume the string only contains words and spaces.

For example, if the string is 'apple banana orange grape cherry', the program will return

{'e': 3, 'a': 1, 'y': 1}

Problem 5: "7777...8?!??!", exclaimed Bob, "I missed it again! Argh!" Every time there's an interesting number coming up, he notices and then promptly forgets. Who doesn't like catching those one-off interesting mileage numbers?

Let's make it so Bob never misses another interesting number. We've hacked into his car's computer, and we have a box hooked up that reads mileage numbers. We've got a box glued to his dash that lights up yellow or green depending on whether it receives a 1 or a 2 (respectively).

It's up to you, intrepid warrior, to glue the parts together. Write the function that parses the mileage number input, and returns a 2 if the number is "interesting" (see below), a 1 if an interesting number occurs within the next two miles, or a 0 if the number is not interesting.

"Interesting" Numbers
Interesting numbers are 3-or-more digit numbers that meet one or more of the following criteria:

Any digit followed by all zeros: 100, 90000
Every digit is the same number: 1111
The digits are sequential, incementing: 1234
The digits are sequential, decrementing: 43211
The digits are a palindrome: 1221 or 73837
The digits match one of the values in the awesome_numbers array because Bob's birthday could be contained in the mileage numbers
Please Note:

For decrementing sequences, 0 should come after 1, and not before 9, as in 3210.
To help Bob, you should write a function with the signature is_interesting(mileage, awesome_numbers)->int.

Also, you should expect these inputs and outputs:

# "boring" numbers
is_interesting(3, [1337, 256])    # 0

# progress as we near an "interesting" number
is_interesting(11208, []) # 0
is_interesting(11209, []) # 1
is_interesting(11211, []) # 2

# nearing a provided "awesome phrase"
is_interesting(1335, [1337, 256]) # 1
is_interesting(1336, [1337, 256]) # 1
is_interesting(1337, [1337, 256]) # 2
